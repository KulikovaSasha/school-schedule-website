from flask import Blueprint, render_template, redirect, url_for, flash, request, jsonify
from flask_login import login_required, current_user, logout_user, login_user
from app import db
from app.forms import LoginForm, RegistrationForm, ScheduleForm
from app.models import Schedule, Lesson, User, AVAILABLE_FONTS
import json
from datetime import datetime, timedelta

# –°–æ–∑–¥–∞–µ–º Blueprint —Å –∏–º–µ–Ω–µ–º 'main'
main = Blueprint('main', __name__)


@main.app_template_filter('count_days')
def count_days_filter(days_json):
    """–§–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –¥–Ω–µ–π –∏–∑ JSON —Å—Ç—Ä–æ–∫–∏"""
    try:
        days_list = json.loads(days_json)
        return len(days_list)
    except (json.JSONDecodeError, TypeError):
        return 0


def calculate_lesson_times(start_time, end_time):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–∫–∞ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 60 –º–∏–Ω—É—Ç)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
        if not start_time or not end_time:
            print(f"‚ö†Ô∏è WARNING: start_time or end_time is None. start_time: {start_time}, end_time: {end_time}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return [{'start': f'–£—Ä–æ–∫ {i + 1}', 'end': ''} for i in range(6)]

        start = datetime.strptime(start_time, '%H:%M')
        end = datetime.strptime(end_time, '%H:%M')

        # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
        total_minutes = (end - start).total_seconds() / 60

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤ –ø–æ 60 –º–∏–Ω—É—Ç –∫–∞–∂–¥—ã–π - –û–ö–†–£–ì–õ–Ø–ï–ú –í –ë–û–õ–¨–®–£–Æ –°–¢–û–†–û–ù–£
        lessons_count = int((total_minutes + 59) // 60)  # –û–∫—Ä—É–≥–ª—è–µ–º –≤–≤–µ—Ä—Ö
        lessons_count = max(1, lessons_count)  # –ú–∏–Ω–∏–º—É–º 1 —É—Ä–æ–∫

        times = []
        for i in range(lessons_count):
            lesson_start = start + timedelta(minutes=60 * i)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 60 –º–∏–Ω—É—Ç
            lesson_end = lesson_start + timedelta(minutes=60)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 60 –º–∏–Ω—É—Ç
            times.append({
                'start': lesson_start.strftime('%H:%M'),
                'end': lesson_end.strftime('%H:%M')
            })

        return times
    except ValueError as e:
        print(f"‚ùå ERROR in calculate_lesson_times: {e}")
        print(f"üîç DEBUG: start_time: {start_time}, end_time: {end_time}")
        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é
        return [{'start': f'–£—Ä–æ–∫ {i + 1}', 'end': ''} for i in range(6)]


def get_day_display_name(day_code):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
    day_mapping = {
        'mon': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        'tue': '–í—Ç–æ—Ä–Ω–∏–∫',
        'wed': '–°—Ä–µ–¥–∞',
        'thu': '–ß–µ—Ç–≤–µ—Ä–≥',
        'fri': '–ü—è—Ç–Ω–∏—Ü–∞',
        'sat': '–°—É–±–±–æ—Ç–∞',
        'sun': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
        'san': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
    }

    corrections = {
        'san': 'sun',
        'sut': 'sat',
        'thus': 'thu',
        'wend': 'wed'
    }

    corrected_code = corrections.get(day_code, day_code)
    return day_mapping.get(corrected_code, f'–î–µ–Ω—å ({day_code})')


# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@main.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return render_template('index.html')


# –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@main.route('/dashboard')
@login_required
def dashboard():
    """–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π"""
    schedules = Schedule.query.filter_by(user_id=current_user.id).all()

    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π None –∑–Ω–∞—á–µ–Ω–∏–π
    sorted_schedules = sorted(
        schedules,
        key=lambda x: x.created_at if x.created_at is not None else datetime.min,
        reverse=True
    )

    return render_template('dashboard.html', schedules=sorted_schedules)


# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@main.route('/create-schedule', methods=['GET', 'POST'])
@login_required
def create_schedule():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    form = ScheduleForm()

    if form.validate_on_submit():
        try:
            print(f"DEBUG: Form data - {form.data}")
            print(f"DEBUG: Days of week data - {form.days_of_week.data}, type: {type(form.days_of_week.data)}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (–±–µ–∑ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω)
            start_time = form.start_time.data
            end_time = form.end_time.data

            if start_time and end_time:
                try:
                    start = datetime.strptime(start_time, '%H:%M')
                    end = datetime.strptime(end_time, '%H:%M')

                    if end <= start:
                        flash('–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞!', 'danger')
                        return render_template('create_schedule.html', form=form)
                except ValueError as e:
                    flash('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:MM', 'danger')
                    return render_template('create_schedule.html', form=form)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
            if isinstance(form.days_of_week.data, str):
                if ',' in form.days_of_week.data:
                    days_list = form.days_of_week.data.split(',')
                else:
                    try:
                        days_list = json.loads(form.days_of_week.data)
                    except json.JSONDecodeError:
                        days_list = [form.days_of_week.data]
            else:
                days_list = form.days_of_week.data

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON —Å—Ç—Ä–æ–∫—É
            days_json = json.dumps(days_list)
            print(f"DEBUG: Days JSON - {days_json}")

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            schedule = Schedule(
                title=form.title.data,
                user_id=current_user.id,
                days_of_week=days_json,
                start_time=form.start_time.data,
                end_time=form.end_time.data
            )

            db.session.add(schedule)
            db.session.commit()

            flash('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å.', 'success')
            return redirect(url_for('main.edit_schedule', schedule_id=schedule.id))

        except Exception as e:
            db.session.rollback()
            print(f"ERROR in create_schedule: {str(e)}")
            import traceback
            traceback.print_exc()
            flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}', 'danger')

    return render_template('create_schedule.html', form=form)


@main.route('/schedule/<int:schedule_id>/edit')
@login_required
def edit_schedule(schedule_id):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    schedule = Schedule.query.get_or_404(schedule_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    if schedule.user_id != current_user.id:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.', 'danger')
        return redirect(url_for('main.dashboard'))

    try:
        days_list = json.loads(schedule.days_of_week)
    except (json.JSONDecodeError, TypeError):
        days_list = ['mon', 'tue', 'wed', 'thu', 'fri']

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–¥–æ–≤ –¥–Ω–µ–π –≤ —á–∏—Ç–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    display_days = [get_day_display_name(day) for day in days_list]

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è
    lesson_times = calculate_lesson_times(schedule.start_time, schedule.end_time)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É—Ä–æ–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä–∏
    lessons = {}
    existing_lessons = Lesson.query.filter_by(schedule_id=schedule_id).all()
    for lesson in existing_lessons:
        key = f"{lesson.day_index}_{lesson.lesson_index}"
        lessons[key] = {
            'subject_name': lesson.subject_name,
            'color': lesson.color,
            'lesson_link': lesson.lesson_link,
            'link_text': lesson.link_text,
            'font_family': lesson.font_family
        }

    # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞
    available_subjects = [
        "–ê–ª–≥–µ–±—Ä–∞", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è", "–ë–∏–æ–ª–æ–≥–∏—è", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è",
        "–ì–µ–æ–º–µ—Ç—Ä–∏—è", "–ò–ó–û", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–ò—Å–ø–∞–Ω—Å–∫–∏–π —è–∑—ã–∫", "–ò—Å—Ç–æ—Ä–∏—è",
        "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–µ —á—Ç–µ–Ω–∏–µ", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ú—É–∑—ã–∫–∞",
        "–ù–µ–º–µ—Ü–∫–∏–π —è–∑—ã–∫", "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "–û–∫—Ä—É–∂–∞—é—â–∏–π –º–∏—Ä", "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Python", "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–π—Ç–æ–≤ –≤ Python", "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
        "–¢–µ–æ—Ä–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è", "–§–∏–∑–∏–∫–∞",
        "–§–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞", "–•–∏–º–∏—è", "–ß–µ—Ä—á–µ–Ω–∏–µ", "–Ø–ø–æ–Ω—Å–∫–∏–π —è–∑—ã–∫"
    ]

    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —É—Ä–æ–∫–æ–≤
    popular_colors = [
        "#d6d4fb", "#fcbfe7", "#ffffff", "#caf2c0", "#f5d5fb", "#fbffbd", "#a5e1f7"
    ]

    return render_template('edit_schedule.html',
                           schedule=schedule,
                           days=display_days,
                           day_codes=days_list,
                           lesson_times=lesson_times,
                           lessons=lessons,
                           available_subjects=available_subjects,
                           popular_colors=popular_colors,
                           available_fonts=AVAILABLE_FONTS)


@main.route('/schedule/<int:schedule_id>/save', methods=['POST'])
@login_required
def save_schedule(schedule_id):
    print(f"üîç DEBUG: Save request received for schedule {schedule_id}")

    try:
        schedule = Schedule.query.get_or_404(schedule_id)
        print(f"üîç DEBUG: Schedule found: {schedule.title}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if schedule.user_id != current_user.id:
            return jsonify({'success': False, 'error': 'Access denied'}), 403

        data = request.get_json()
        print(f"üîç DEBUG: Received data: {data}")

        if not data:
            return jsonify({'success': False, 'error': 'No data provided'}), 400

        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É—Ä–æ–∫–∏
        Lesson.query.filter_by(schedule_id=schedule_id).delete()

        # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        try:
            days_list = json.loads(schedule.days_of_week)
        except (json.JSONDecodeError, TypeError):
            days_list = ['mon', 'tue', 'wed', 'thu', 'fri']

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ —É—Ä–æ–∫–∏
        new_lessons_count = 0
        for key, lesson_data in data.items():
            if '_' in key:
                try:
                    day_index, lesson_index = map(int, key.split('_'))

                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤
                    if (0 <= day_index < len(days_list) and
                            0 <= lesson_index < schedule.lessons_per_day):
                        font_family = lesson_data.get('font_family', 'Bookman Old Style')
                        print(f"üîç DEBUG: Saving lesson {key} with font: '{font_family}'")

                        lesson = Lesson(
                            schedule_id=schedule_id,
                            day_index=day_index,
                            lesson_index=lesson_index,
                            subject_name=lesson_data.get('subject_name', ''),
                            color=lesson_data.get('color', '#FFFFFF'),
                            lesson_link=lesson_data.get('lesson_link', ''),
                            link_text=lesson_data.get('link_text', ''),
                            font_family=font_family
                        )
                        db.session.add(lesson)
                        new_lessons_count += 1

                except (ValueError, TypeError) as e:
                    print(f"üîç DEBUG: Error processing key {key}: {e}")
                    continue

        db.session.commit()
        print(f"üîç DEBUG: Successfully saved {new_lessons_count} lessons")
        return jsonify({'success': True, 'message': f'–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {new_lessons_count} —É—Ä–æ–∫–æ–≤'})

    except Exception as e:
        db.session.rollback()
        print(f"‚ùå ERROR in save_schedule: {str(e)}")
        import traceback
        traceback.print_exc()
        return jsonify({'success': False, 'error': str(e)}), 500


# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@main.route('/schedule/<int:schedule_id>/view')
@login_required
def view_schedule(schedule_id):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥–æ—Ç–æ–≤–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    schedule = Schedule.query.get_or_404(schedule_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if schedule.user_id != current_user.id:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.', 'danger')
        return redirect(url_for('main.dashboard'))

    try:
        days_list = json.loads(schedule.days_of_week)
    except (json.JSONDecodeError, TypeError):
        days_list = ['mon', 'tue', 'wed', 'thu', 'fri']

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–¥–æ–≤ –¥–Ω–µ–π
    display_days = [get_day_display_name(day) for day in days_list]

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è
    lesson_times = calculate_lesson_times(schedule.start_time, schedule.end_time)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Ä–æ–∫–∏ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä–∏
    lessons = {}
    existing_lessons = Lesson.query.filter_by(schedule_id=schedule_id).all()
    for lesson in existing_lessons:
        key = f"{lesson.day_index}_{lesson.lesson_index}"
        lessons[key] = {
            'subject_name': lesson.subject_name,
            'color': lesson.color,
            'lesson_link': lesson.lesson_link,
            'link_text': lesson.link_text,
            'font_family': lesson.font_family
        }

    current_time = datetime.now().strftime("%d.%m.%Y %H:%M")

    return render_template('view_schedule.html',
                           schedule=schedule,
                           days=display_days,
                           lesson_times=lesson_times,
                           lessons=lessons,
                           current_time=current_time)


# (login, register, logout, profile, about, help, contact, error handlers –∏ —Ç.–¥.)

# –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è - –î–û–ë–ê–í–¨–¢–ï –≠–¢–û–¢ –ú–ê–†–®–†–£–¢
@main.route('/schedule/<int:schedule_id>/delete', methods=['POST'])
@login_required
def delete_schedule(schedule_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    schedule = Schedule.query.get_or_404(schedule_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if schedule.user_id != current_user.id:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.', 'danger')
        return redirect(url_for('main.dashboard'))

    try:
        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∏
        Lesson.query.filter_by(schedule_id=schedule_id).delete()
        # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        db.session.delete(schedule)
        db.session.commit()

        flash('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.', 'success')
    except Exception as e:
        db.session.rollback()
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}', 'danger')

    return redirect(url_for('main.dashboard'))

@main.route('/logout')
@login_required
def logout():
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    logout_user()
    flash('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.', 'info')
    return redirect(url_for('main.index'))


# ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –º–∞—Ä—à—Ä—É—Ç–æ–≤


# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è
@main.route('/profile')
@login_required
def profile():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return render_template('profile.html', user=current_user)


# –û –ø—Ä–æ–≥—Ä–∞–º–º–µ
@main.route('/about')
def about():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
    return render_template('about.html')


# –ü–æ–º–æ—â—å
@main.route('/help')
def help():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–º–æ—â–∏"""
    return render_template('help.html')


# –ö–æ–Ω—Ç–∞–∫—Ç—ã
@main.route('/contact')
def contact():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    return render_template('contact.html')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ 404
@main.app_errorhandler(404)
def not_found_error(error):
    return render_template('404.html'), 404


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ 500
@main.app_errorhandler(500)
def internal_error(error):
    db.session.rollback()
    return render_template('500.html'), 500


# Health check
@main.route('/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return jsonify({
        'status': 'ok',
        'message': 'Application is running',
        'timestamp': datetime.now().isoformat()
    })


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
@main.route('/export-pdf/<int:schedule_id>')
@login_required
def export_pdf(schedule_id):
    """–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF (–∑–∞–≥–ª—É—à–∫–∞)"""
    flash('–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', 'info')
    return redirect(url_for('main.view_schedule', schedule_id=schedule_id))


@main.route('/sync-google/<int:schedule_id>')
@login_required
def sync_google_calendar(schedule_id):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Calendar (–∑–∞–≥–ª—É—à–∫–∞)"""
    flash('–§—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Calendar –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', 'info')
    return redirect(url_for('main.view_schedule', schedule_id=schedule_id))


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
@main.route('/fix-old-data')
@login_required
def fix_old_data():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –æ–ø–µ—á–∞—Ç–∫–æ–π 'san'"""
    if current_user.username != 'admin':
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.', 'danger')
        return redirect(url_for('main.dashboard'))

    try:
        schedules = Schedule.query.all()
        fixed_count = 0

        for schedule in schedules:
            days_list = json.loads(schedule.days_of_week)

            if 'san' in days_list:
                corrected_days = ['sun' if day == 'san' else day for day in days_list]
                schedule.days_of_week = json.dumps(corrected_days)
                fixed_count += 1

        db.session.commit()
        flash(f'–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: {fixed_count}', 'success')

    except Exception as e:
        db.session.rollback()
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}', 'danger')

    return redirect(url_for('main.dashboard'))


@main.route('/profile')
@login_required
def user_profile():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        print(f"DEBUG: Loading profile for user {current_user.id}")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        schedules_count = Schedule.query.filter_by(user_id=current_user.id).count()
        print(f"DEBUG: Schedules count: {schedules_count}")

        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤
        total_lessons = 0
        user_schedules = Schedule.query.filter_by(user_id=current_user.id).all()

        for schedule in user_schedules:
            try:
                days_list = json.loads(schedule.days_of_week)
                total_lessons += schedule.lessons_per_day * len(days_list)
            except (json.JSONDecodeError, TypeError) as e:
                print(f"DEBUG: Error parsing days for schedule {schedule.id}: {e}")
                total_lessons += schedule.lessons_per_day * 5

        print(f"DEBUG: Total lessons: {total_lessons}")

        return render_template('profile.html',
                               schedules_count=schedules_count,
                               total_lessons=total_lessons)

    except Exception as e:
        print(f"ERROR in user_profile: {str(e)}")
        import traceback
        traceback.print_exc()
        flash('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è', 'error')
        return redirect(url_for('main.dashboard'))


@main.route('/change-password', methods=['POST'])
@login_required
def change_password():
    """–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        current_password = request.form.get('current_password')
        new_password = request.form.get('new_password')
        confirm_password = request.form.get('confirm_password')

        if not all([current_password, new_password, confirm_password]):
            flash('–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è', 'danger')
            return redirect(url_for('main.user_profile'))

        if new_password != confirm_password:
            flash('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç', 'danger')
            return redirect(url_for('main.user_profile'))

        if len(new_password) < 6:
            flash('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤', 'danger')
            return redirect(url_for('main.user_profile'))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
        if not current_user.check_password(current_password):
            flash('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å', 'danger')
            return redirect(url_for('main.user_profile'))

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
        current_user.set_password(new_password)
        db.session.commit()

        flash('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω', 'success')
        return redirect(url_for('main.user_profile'))

    except Exception as e:
        db.session.rollback()
        flash('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è', 'error')
        return redirect(url_for('main.user_profile'))


@main.route('/schedule/<int:schedule_id>/update_title', methods=['POST'])
@login_required
def update_schedule_title(schedule_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    try:
        schedule = Schedule.query.get_or_404(schedule_id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if schedule.user_id != current_user.id:
            return jsonify({'success': False, 'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403

        data = request.get_json()
        new_title = data.get('title', '').strip()

        if not new_title:
            return jsonify({'success': False, 'error': '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}), 400

        if len(new_title) > 100:
            return jsonify({'success': False, 'error': '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ'}), 400

        schedule.title = new_title
        db.session.commit()

        return jsonify({'success': True, 'message': '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ'})

    except Exception as e:
        db.session.rollback()
        print(f"ERROR in update_schedule_title: {str(e)}")
        return jsonify({'success': False, 'error': str(e)}), 500